.PHONY: clean compile_translations coverage docs dummy_translations \
	extract_translations fake_translations help pull_translations push_translations \
	quality requirements run selfcheck stop test test-all validate

.DEFAULT_GOAL := help

define BROWSER_PYSCRIPT
import os, webbrowser, sys
try:
	from urllib import pathname2url
except:
	from urllib.request import pathname2url

webbrowser.open("file://" + pathname2url(os.path.abspath(sys.argv[1])))
endef
export BROWSER_PYSCRIPT
BROWSER := python -c "$$BROWSER_PYSCRIPT"

# Auth
USER_ID  = $(shell id -u)
GROUP_ID = $(shell id -g)

# Dockerized tools
# -- Docker
COMPOSE            = docker-compose
COMPOSE_BUILD      = $(COMPOSE) build --build-arg user=$(USER_ID) --build-arg group=$(GROUP_ID)
COMPOSE_RUN        = $(COMPOSE) run --rm --user=$(USER_ID):$(GROUP_ID)
COMPOSE_RUN_LMS    = $(COMPOSE_RUN) lms
COMPOSE_RUN_FONZIE = $(COMPOSE_RUN) fonzie
COMPOSE_RUN_NODE   = $(COMPOSE_RUN) node

# -- Python
COVERAGE    = $(COMPOSE_RUN_FONZIE) coverage
DIFF-COVER  = $(COMPOSE_RUN_FONZIE) diff-cover
PIP         = $(COMPOSE_RUN_FONZIE) pip
PIP-COMPILE = $(COMPOSE_RUN_FONZIE) pip-compile
PIP-SYNC    = $(COMPOSE_RUN_FONZIE) pip-sync
PYTEST      = $(COMPOSE_RUN_FONZIE) pytest
TOX         = $(COMPOSE_RUN_FONZIE) tox

# -- Node
YARN = $(COMPOSE_RUN_NODE) yarn


help: ## display this help message
	@echo "Please use \`make <target>' where <target> is one of"
	@perl -nle'print $& if m{^[a-zA-Z_-]+:.*?## .*$$}' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m  %-25s\033[0m %s\n", $$1, $$2}'

clean: ## remove generated byte code, coverage reports, and build artifacts
	$(COMPOSE_RUN_FONZIE) find . -name '__pycache__' -exec rm -rf {} +
	$(COMPOSE_RUN_FONZIE) find . -name '*.pyc' -exec rm -f {} +
	$(COMPOSE_RUN_FONZIE) find . -name '*.pyo' -exec rm -f {} +
	$(COMPOSE_RUN_FONZIE) find . -name '*~' -exec rm -f {} +
	$(COVERAGE) erase
	$(COMPOSE_RUN_FONZIE) rm -fr build/
	$(COMPOSE_RUN_FONZIE) rm -fr dist/
	$(COMPOSE_RUN_FONZIE) rm -fr *.egg-info

coverage: clean ## generate and view HTML coverage report
	$(PYTEST) --cov-report html
	$(BROWSER) htmlcov/index.html

docs: ## generate Sphinx HTML documentation, including API docs
	$(TOX) -e docs
	$(BROWSER) docs/_build/html/index.html

quality: ## check coding style with pycodestyle and pylint
	$(TOX) -e quality

requirements: ## install development environment requirements
	$(COMPOSE_BUILD) lms
	$(COMPOSE_BUILD) fonzie
	$(YARN) install

test: clean ## run tests in the current virtualenv
	$(PYTEST)

diff_cover: test
	$(DIFF-COVER) coverage.xml

test-all: ## run tests on every supported Python/Django combination
	$(TOX) -e quality
	$(TOX)

test-spec: ## run tests on API specification (API blueprint)
	$(COMPOSE) up -d lms
	$(YARN) dredd

validate: quality test ## run tests and quality checks

selfcheck: ## check that the Makefile is well-formed
	@echo "The Makefile is well-formed."

run: ## start develppment server
	$(COMPOSE) up -d

stop:  ## stop development server
	$(COMPOSE) stop
